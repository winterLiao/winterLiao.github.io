{"meta":{"title":"winter","subtitle":"我只是个小开发仔","description":"iOS开发","author":"廖文韬","url":"https://winterliao.github.io"},"pages":[{"title":"为何建站 && 为何写作","date":"2017-02-07T05:23:07.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"about/index.html","permalink":"https://winterliao.github.io/about/index.html","excerpt":"","text":"为何建站浪浪鹅构，独立站长曾是一个牛逼哄哄的角色，然而现在不那么神秘了，这里不扯这些前世因果轮回。总之搭建说IT这个网站不仅仅是为了装逼，写作是件艺术，通过写作往往能让自己的思路更清晰、更有想法，对于不善言辞的程序员来讲，更是百利而无一害。你说是吧…… 为何写写作 读的书越多，你会发现知道的东西越多，不知道的东西就更多了，不知道远远大于知道，于是你在两者间不断碰撞、焦虑、欢喜、忧伤，产生各种思想、情感和故事，记录下来，就是文章。 引自《MacTalk》跨越边界 显然，这个博客是带有某种程序员感情的，如果你也是开发，那就能共振了。哦说错了，是研发、共鸣！ 写博客不代表不好好写代码、不好好工作，请不要纠结。本站主要作为技术笔记存档，内容主要涉及前端开发，含移动端，偶尔可能也会有一些碎碎念，发发感慨。如果某一篇帮助了你，请记得点个赞。 作为内容站，持续输出高质量的内容是件不太容易的事情，本站的任何文章，你可任意转载，但请保留原文链接。如有兴趣，欢迎一起码字。 关于作者90后姓唐的程序猿(不是媛)，目前致力于JavaScript大法，ReactNative是目前的工作。鸡汤一站，请自取一篇饮 如果您遇到麻烦或对本站有疑问，请在本站找到那个白色❓号并点击查看"},{"title":"QA","date":"2017-03-29T10:49:38.000Z","updated":"2017-04-23T18:14:28.000Z","comments":true,"path":"help/index.html","permalink":"https://winterliao.github.io/help/index.html","excerpt":"","text":"这个页面不贴配图了，说点实在的Q: 你这网站怎么弄的，还挺好看的啊？ A: 本站是静态博客，通过hexo生成，主题是我自己写的。免费使用，已开源至GitHub，本站底部有它们的链接 Q: 为什么博客有时候打开速度很慢，一直在加载呢？ A: 本站服务器在中国大陆，由于是静态网站不涉及数据库操作，理论上速度会很快。只是评论组件使用的Disqus服务器在墙外，物虽好但用户体验就得打折扣。不过不影响文章阅读。 Q: 我也想用你的主题搭个博客，不知道怎么弄？ A: 先去hexo官网看看，学会用这个写作并学会使用gitpages之类的部署博客。教程谷歌一下遍地皆是。主题是免费的，在本站底部可找到链接，根据文档自及配置就好了。遇到问题，在本页留言即可，我会很愿意帮助你的。需要注意的是主题有全站https开关，在主题_config.yml文件的fullHttps处配置。如配置不当r某些文件就无法正确引用，加载粗来的页面会很挫。 Q: 你这主题，我配置了怎么运行报错啊，跑不起来啊？ A: 关于使用主题出错，请先前往JSimple-issues寻找答案，说不定你遇到的问题，已经有人碰到而我也回答解决方式了。关于主题的任何问题，我都会在那里回复 Q: 上不了谷歌，翻不了墙怎么办？ A: 针对这类问题，有两种方案可选：改hosts和使用VPN代理。后者又有两种方案：掏钱和免费代理。这一点看个人需求。如果用量比较狠，还是掏钱吧。现在免费的梯子不少，像GreenVPN、Lantern、www.ishadowsocks.com都是很好的方案。关于hosts方案，请前往这个项目DeShell Q: 软件开发难么，怎么才能成为一个精英？ 软件开发看起来比较高大上外加一些神秘，但实际上和普通工种并无太大区别。只是做软件开发有一个终生学习的过程。学的慢跟不上时代，就会被淘汰。另外我认为做开发兴趣至关重要，但实际上我也发现了某些为了生计并不喜欢这行的，也做得风生水起，怎么说呢，只要有心，都能成才，难不难并不重要，看你想要什么。至于怎么成为一个软件精英，这个问题交给谷歌，你问它吧！ Q: 香港什么时候回归，台湾呢？ A: 哥们，你逗我玩呢，香港早就回归了好吧。至于台湾嘛，我真不知道。不过回归与否我们都是中国人，你说是吧。有爱国之心，点赞 Q: 站长你哪里人、几岁了、在哪里工作、你们前台漂亮吗、你本人有我长得帅吗？ A: 额，你一次问我这么多问题，都是隐私，还要问我有没有你帅……这个问题拒答！ 好了，暂时更新这些，需要什么底部开个腔……"},{"title":"标签云","date":"2017-02-04T07:37:12.000Z","updated":"2017-04-23T18:14:28.000Z","comments":true,"path":"tags/index.html","permalink":"https://winterliao.github.io/tags/index.html","excerpt":"","text":""},{"title":"时光轴","date":"2017-02-07T05:23:27.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"timeline/index.html","permalink":"https://winterliao.github.io/timeline/index.html","excerpt":"","text":"时光轴嘛，得先有时光，会更新的，别急……"},{"title":"媒体资源？嗯，就叫这个吧...","date":"2017-03-18T11:56:26.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"video/index.html","permalink":"https://winterliao.github.io/video/index.html","excerpt":"","text":"片儿总会有的，我尽量快点补上你们喜欢的，不要急…"},{"title":"重量级嘉宾推荐","date":"2017-02-07T05:22:22.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"links/index.html","permalink":"https://winterliao.github.io/links/index.html","excerpt":"","text":"以下摘录有趣、有意义、有影响力、有正能量的博客、资源这里并不打算作为网址大全，因此不接受以SEO为目的的友情链接。以下排序不分那啥，也不能覆盖所有方向，如果忽略了大师站，请原谅鄙人孤陋寡闻 鸡爱死大法系 阮一峰博客闲情写手腾讯AlloyTeam 苹果大法系 喵大人博客Objc.ioSwifter 娱乐系 VIMCodeTank 扯淡系 没有链接，请直接关注微信公众号：小道消息、MacTalk等等"},{"title":"RSS，Are You Ok ?","date":"2017-03-18T11:56:40.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"rss/index.html","permalink":"https://winterliao.github.io/rss/index.html","excerpt":"","text":"这个模块现在没有，以后也不一定会有，看到这里有没有觉得好污亏 补锅，感兴趣可自行关注这货，传送门如下："},{"title":"移动互联网？","date":"2017-03-18T11:56:20.000Z","updated":"2017-04-23T18:14:28.000Z","comments":false,"path":"app/index.html","permalink":"https://winterliao.github.io/app/index.html","excerpt":"","text":"憋闹了，还没有爱蒲。博客写的差不多了，再考虑写个移动互联网….fyiguhjnwkefnmwoeih68yuih4jnkrfewdfyugbijnk.wfww3f 5jhyrtgve5jhytbgvef5grefvqwu6ejynhbvwer5jr5hb4gevgwh54uh3g4weab eh43eg223t4whretbvfw345u36jhtbevww32q4wu5ejhtbevwgw354uhtbgevfcewg 擦了下键盘，这些你可以拿去当QQ密码，绝不会被盗号，不用谢！"}],"posts":[{"title":"MGJRouterDemo","slug":"MGJRouterDemo","date":"2018-02-16T09:03:54.000Z","updated":"2018-07-16T09:04:54.804Z","comments":true,"path":"2018/02/16/MGJRouterDemo/","link":"","permalink":"https://winterliao.github.io/2018/02/16/MGJRouterDemo/","excerpt":"","text":"背景最开始想做路由，是因为当时app中有大量与H5之间的交互，原生和H5的跳转操作比较多比较频繁，新增一个跳转又涉及到改代码发版本,为了统一iOS、安卓和H5的跳转，引入了路由。 作用后来发现路由，可解决的问题远远不止这个，Router就像是个调度中心，各个模块通过路由调度其他模块，模块之间不需要相互引用，调度方式更加统一，更加自由，能够实现解耦的作用，同时也为之后的组件化开发提供了基础。 路由选择目前github优秀的路由设计已经有很多，如JLRoutes，MGJRouter，CTMediator。JLRoutes提供的功能比较复杂，有很多我个人用不上的功能，所以没有选择。CTMediator更适合业务比较复杂的情况，MGJRouter的使用上更加容易上手，功能也比较简单，更加适用于页面跳转这种业务比较多的场景。所以我项目中选择了MGJRouter MGJRouterMGJRouter就一个单例类，使用前需要通过注册组件，调用方通过URL调用服务方页面，通过路由表的映射关系进行关联，调用方可以传入复 杂的参数、对象等。基本跳转主要是注册组件，调用openURl方法，传入参数即可实现。[MGJRouter registerURLPattern:@\"mgj://foo/bar\" toHandler:^(NSDictionary *routerParameters) &#123;NSLog(@\"routerParameterUserInfo:%@\", routerParameters[MGJRouterParameterUserInfo]);&#125;];[MGJRouter openURL:@\"mgj://foo/bar\"]; 使用一个类来统一管理注册的方法，再load方法中进行注册，就不会到处看到注册的代码，方便管理。 很多人说没有反向传值的方法，其实和我们其他跳转一样，传参数的时候使用block即可解决。[MGJRouter openURL:@\"LWT://Test3/PushMainVC\"withUserInfo:@&#123;@\"navigationVC\" : self.navigationController,@\"block\":^(NSString * text)&#123;NSLog(@\"%@\",text);&#125;,&#125;completion:nil]; 代码下载demo中有MGJRouter各个方法的使用案例,包括跳转，获取组件，正反向传参。MGJRouter使用Demo","categories":[],"tags":[]},{"title":"AttrubuteTextAction","slug":"attrubuteTextAction","date":"2017-07-04T08:37:41.000Z","updated":"2017-07-04T09:32:55.000Z","comments":true,"path":"2017/07/04/attrubuteTextAction/","link":"","permalink":"https://winterliao.github.io/2017/07/04/attrubuteTextAction/","excerpt":"","text":"需求字符串中某段区域需要添加点击效果或者字符串中添加可点击的按钮。解决：给UILabel添加点击事件的category。 调用方法用字符串标记需要点击的位置NSMutableAttributedString *attributedString1 = [[NSMutableAttributedString alloc]initWithString:@\"这是一串可点击的字符串，通过字符串进行标记了点击\"];[attributedString1 addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:20] range:NSMakeRange(0, attributedString1.length)];[attributedString1 addAttribute:NSForegroundColorAttributeName value:[UIColor greenColor] range:NSMakeRange(5, 2)];[attributedString1 addAttribute:NSForegroundColorAttributeName value:[UIColor blueColor] range:NSMakeRange(attributedString1.length - 2, 2)];_textLabel1.attributedText = attributedString1;[_textLabel1 addAttributeActionWithStrings:@[@\"点击\",@\"点击\"] tapTargetAction:^(NSString *string, NSRange range, NSInteger index) &#123; NSLog(@\"点击字符串:%@ 范围在%@，第%ld个\",string,NSStringFromRange(range),index+1);&#125;]; 用范围标记需要点击的位置（实现插入按钮）NSMutableAttributedString *attributedString2 = [[NSMutableAttributedString alloc]initWithString:@\"使用范围来进行标记的字符串，可以在字符串在添加图片进行点击，实现再字符串中插入按钮的效果,有颜色的都可点击\"];NSRange rang1 = [attributedString2.string rangeOfString:@\"标记\"];NSRange rang2 = [attributedString2.string rangeOfString:@\"点击\"];NSRange rang3 = [attributedString2.string rangeOfString:@\"按钮\"];[attributedString2 addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:15] range:NSMakeRange(0, attributedString2.length)];[attributedString2 addAttribute:NSForegroundColorAttributeName value:[UIColor greenColor] range:rang1];[attributedString2 addAttribute:NSForegroundColorAttributeName value:[UIColor blueColor] range:rang2];//添加图片附件(插入图片，添加点击事件)NSTextAttachment *attach = [[NSTextAttachment alloc] init];attach.image = [UIImage imageNamed:@\"abc.jpg\"];attach.bounds = CGRectMake(0, 0, 15, 15);NSAttributedString *attachString = [NSAttributedString attributedStringWithAttachment:attach];[attributedString2 insertAttributedString:attachString atIndex:rang3.location];_textLabel2.attributedText = attributedString2;[_textLabel2 addAttributeActionWithRange:[NSArray arrayWithObjects:[NSValue valueWithRange:rang1],[NSValue valueWithRange:rang2],[NSValue valueWithRange:rang3],nil] tapTargetAction:^(NSString *string, NSRange range, NSInteger index) &#123; NSLog(@\"点击字符串:%@ 范围在%@，第%ld个\",string,NSStringFromRange(range),index+1);&#125;]; 代码下载github下载","categories":[],"tags":[]},{"title":"Swift与OC的差异","slug":"swift-different","date":"2017-03-18T08:22:37.000Z","updated":"2017-06-13T08:51:22.000Z","comments":true,"path":"2017/03/18/swift-different/","link":"","permalink":"https://winterliao.github.io/2017/03/18/swift-different/","excerpt":"","text":"在Swift刚出来时就学习过，之后也一直没有用Swift写过项目，很快就忘记了，最近又花了点时间过了一遍官方的学习文档。学习笔记 Swift与OC的差异基础语法 声明使用let和var关键字，Swift可以推出出类型,let声明的常量不可修改，var声明变量。 Swift对数据要求严格，不存在隐式转换，强制转换格式：int(a) 使用整数类型的 min 和 max 属性来获取对应类型的最小值和最大值 BOOL类型只有true和false，不再是非0即真，Swift的赋值运算符没有返回值 Swift增加了元组类型。元组把多个值组合成一个复合值，元组内的值可以使任意类型，并不要求是相同类型。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。 Swift增加了可选类型，用于处理值缺失的情况。可选类型表示：有值或无值。swift定义的常量和变量是没有默认值的，所以引入了可选的概念，用?修饰变量，标示该变量的值可能为空也可能为某个值，然后获取的时候用!强制解析，此时必须有值，否则报运行时错误。涉及到可选绑定、强制解析和隐式解析等内容。 Swift范围运算符：闭区间运算符（a…b），半开区间运算符（a..&lt;b） 结构体也可以定义方法，和类非常相似 Swift新增泛型的使用，使用占位类型名来代替实际类型名字符串 使用+链接字符串 字符串/字符可以用等于操作符(==)和不等于操作符(!=)进行比较 使用下标，下标可以定义在类、结构体和枚举中，是访问集合，列表或序列中元素的快捷方式。语句 Switch语句： Swift 中，可匹配各种类型，当匹配的 case分支中的代码执行完毕后，程序会终止switch语句，而不会继续执行下一个 case分支。不用像OC一样使用break跳出。还可以使用where语句进行条件判断 循环语句中必须加{} ，即使只有一行代码函数闭包 函数格式 func Sum (num1:Int,num2:Int) –&gt;Int{}，与oc一样函数具有有参数、无参数、有返回值、无返回值等多种类型，也可作为参数或返回值。 Swift特有的闭包表达式，{ (parameters) -&gt; returnType in statements }属性 新增计算属性，计算属性不直接存储值，而是提供一个 getter 和一个可选的setter，来间接获取和设置其他属性或变量的值。 属性观察器，willSet 在新的值被设置之前调用didSet 在新的值被设置之后立即调用willSet 观察器会将新的属性值作为常量参数传入，在 willSet 的实现代码中可以为这个参数指定一个名称，如果不指定则参数仍然可用，这时使用默认名称 newValue 表示。其他当然还有很多的差异没有列出来，这里只是简单的归纳了一部分常遇到的。 Swift只有一个.swift的文件，没有OC的.h和.m文件，不再需要引入头文件来声明。 每条语句不需要使用；结尾,除非是一行中包含多条语句。 Swift支持多行嵌套注释，注释嵌套/*/**/*/ Swift封装的控件浏览完文档，随意封装了些控件类新闻客户端动画加载gif图日期选择器","categories":[],"tags":[]},{"title":"iOS APP框架搭建","slug":"frameWork","date":"2017-03-13T13:50:12.000Z","updated":"2017-04-25T09:26:39.000Z","comments":true,"path":"2017/03/13/frameWork/","link":"","permalink":"https://winterliao.github.io/2017/03/13/frameWork/","excerpt":"","text":"MVC设计模式，纯代码的框架。 1.新建工程1.1 新建项目 删除无用的文件(Main.storyboard,ViewController) 删除plist文件中Main storyboard file base name一项 appdelegate进行修改 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123;self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];self.window.backgroundColor = [UIColor whiteColor];[self.window makeKeyAndVisible];&#125; 1.2 创建不同的target管理工程有时候我们需要多个版本，开发版、测试版或者线上版，或因渠道不同需要区分企业版，AppStore版等。这个时候使用target来管理就比较方便 1.2.1 生成 1.2.2 修改名字需要修改下名字target、scheme、info.plist三项的名字，主要用来区分下版本 注意:修改了info.plist名字需要修改新建的target的配置信息文件，让其能找到info.plist文件 1.2.3 修改下工程配置文件就可以这样使用了：#if DEVELOPMENTNSLog(@\"development\");#elseNSLog(@\"release\");#endif 使用方法可参考:多个Target管理1.3 导入CocoaPods管理依赖库自从CocoaPods升级到1.0.1之后,为多个target导入依赖库,之前的link_with语法不能用了,使用如下方法: source 'https://github.com/CocoaPods/Specs.git'platform :ios, ‘7.0’# ruby语法# target数组 如果有新的target直接加入该数组targetsArray = [‘MyApp’, ‘MyAppTest’]# 循环targetsArray.each do |t|target t dopod 'MJRefresh', '~&gt; 3.1.12'pod 'Masonry', '~&gt; 0.6.1'pod 'AFNetworking', '~&gt; 3.1.0'pod 'MJExtension'pod 'MBProgressHUD'pod 'SDWebImage'endend 使用方法可参考：CocoaPods安装教程1.4 info.plist配置1.4.1 开启http的访问权限info.plist 中添加以下 1.4.2 添加应用白名单iOS9之后分享等必须添加白名单后才可以打开相关应用。字段值为LSApplicationQueriesSchemes 1.4.3 其他设置分享到微信、微博啊等URL Types 2.项目模块化2.1 分类各模块分类具体按照业务需求去归类，开发前把大体的分类号，主体的文件夹建立真实的文件夹，再把真实的文件夹拖到项目中，这样的好处是，避免了在项目中创建虚拟文件夹，然后导致各类文件都放在一块，不方便查找。大致分类： 2.2 导入需要用的第三方库先使用CocoaPods导入项目中一些常用的第三方库,后续再根据需求导入，有些无法用CocoaPods导入的或者是一些需要修改库中代码的拖入到工程中Vender文件夹中 2.3 创建pch文件这个文件用来包含全局使用的头文件，例如:1.第三方头文件2.全局宏定义3.自定义的头文件包含主题、网络请求地址、全局方法、key等 使用方法参考: Pch 文件的正确使用3 全局的宏定义具体方法大家可下载demo看下 3.1 全局配置参数DefineMacro全局宏定义包含一些屏幕宽高、iOS版本、手机类型等#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width#define SCREENH_HEIGHT [UIScreen mainScreen].bounds.size.height//随机颜色#define KRandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0] 3.2 样式定义DefineTheme主要包含样式上的定义,主题颜色、各类字体大小颜色、控件大小等//颜色#define TITLE_COLOR [UIColor blackColor]//标题颜色#define TEXT_COLOR [UIColor grayColor]//正文颜色#define TIPTEXT_COLOR UIColorFromRGB(0x888888)//提示语文本颜色#define MAIN_GROUNDCOLOR UIColorFromRGB(0xF98B1B)//主题景色#define BACKGROUNDCOLOR UIColorFromRGB(0xF7F7F7)//背景颜色//字体大小#define TITLEFONT [UIFont systemFontOfSize:18]#define TEXTFONT [UIFont systemFontOfSize:16]#define TIPTEXTFONT [UIFont systemFontOfSize:12] 3.3 API地址DefineRequest访问的地址，各个接口的查询#if DEVELOPMENT //***************开发版本*************//****************测试环境***********//app服务重构测试//#define BaseURLString @\"http://www-test.baidu.com/rest/post\"//beta//#define BaseURLString @\"http://docker-branch02-web-tomcat.baidu.com:8080/rest/post\"//分之域名//****************开发环境(个人服务器)************//后台XXX#define BaseURLString @\"http://192.168.1.175:8080/baidu/rest/post\"#else //**************生产版本**************#define BaseURLString @\"https://www.baidu.com/rest/post\"#endif//****************接口说明************//获取用户信息#define Request_type_getUserInfo @\"getUserInfo\"//首页广告#define Request_type_queryBannerByType @\"queryBannerByType\" 4. 初期代码编写 4.1 Category4.1.1 Method swizzling为Controller添加一些方法，即可省略继承baseViewController的麻烦，还可以对各工厂类进行操作 #import \"UIViewController+swizzling.h\"#import &lt;objc/runtime.h&gt;@implementation UIViewController (swizzling)+ (void)load &#123;Method fromMethod = class_getInstanceMethod([self class], @selector(viewDidLoad));Method toMethod = class_getInstanceMethod([self class], @selector(swizzlingViewDidLoad));if (!class_addMethod([self class], @selector(swizzlingViewDidLoad), method_getImplementation(toMethod), method_getTypeEncoding(toMethod))) &#123;method_exchangeImplementations(fromMethod, toMethod);&#125;&#125;// 我们自己实现的方法，也就是和self的viewDidLoad方法进行交换的方法。- (void)swizzlingViewDidLoad &#123;NSString *str = [NSString stringWithFormat:@\"%@\", self.class];if(![str containsString:@\"UI\"])&#123;NSLog(@\"统计打点 : %@\", self.title);&#125;[self swizzlingViewDidLoad];&#125;@end 4.1.2 appDelegate添加category用以简化appDelegate中代码 AppDelegate+ViewController.h- (void)setAppWindows&#123;self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];self.window.backgroundColor = [UIColor whiteColor];[[UINavigationBar appearance] setTitleTextAttributes:@&#123;NSForegroundColorAttributeName: [UIColor whiteColor]&#125;];[self.window makeKeyAndVisible];&#125;- (void)setRootViewController&#123;AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];app.window.rootViewController = [[RootTabViewController alloc] init];&#125; AppDelegate+AppService.h需要处理的各类服务都可以添加在这/*** 系统配置*/- (void)systemConfigration;/*** 友盟注册*/- (void)registerUmeng;/*** 个推注册*/- (void)registerGeiTui;/*** 检查更新*/- (void)checkAppUpDataWithshowOption:(BOOL)showOption;/*** 获取用户信息*/- (void)getUserData; 4.2 DataMange 存放对文件的处理方法，文件的路径 数据库的处理 NSUserDefault的处理4.3 Other建一个类存放比较杂乱的一些公共方法/**验证该字符串是否是6-16位字母和数字组合*/+ (BOOL)checkIsDigitalAndLetter:(NSString *)string;/**利用正则表达式验证手机号码*/+ (BOOL)checkTel:(NSString *)str;/**利用正则表达式验证邮箱*/+ (BOOL)checkEmail:(NSString *)email; 4.4 UITools一些公共控件的封装，常用的一些控件进行封装（弹窗、广告轮播等），方便以后统一修改 4.4.1 NavigationViewController封装@interface LWTNavigationViewController ()&lt;UINavigationControllerDelegate&gt;@property (nonatomic, weak) id popDelegate;@end@implementation LWTNavigationViewController- (void)viewDidLoad &#123;[super viewDidLoad];self.popDelegate = self.interactivePopGestureRecognizer.delegate;self.delegate = self;//navigationBar样式设置self.navigationBar.barTintColor = MAIN_GROUNDCOLOR;[self.navigationBar setTitleTextAttributes:@&#123;NSForegroundColorAttributeName : WHITCOLOR, NSFontAttributeName : [UIFont boldSystemFontOfSize:18]&#125;];[self.navigationBar setTintColor:WHITCOLOR]; // Do any additional setup after loading the view.&#125;//解决手势失效问题- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;if (viewController == self.viewControllers[0]) &#123;self.interactivePopGestureRecognizer.delegate = self.popDelegate;&#125;else&#123;self.interactivePopGestureRecognizer.delegate = nil;&#125;&#125;//push时隐藏tabbar- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;if (self.viewControllers.count &gt; 0) &#123;viewController.hidesBottomBarWhenPushed = YES;&#125;[super pushViewController:viewController animated:animated];&#125;//设置样式- (UIStatusBarStyle)preferredStatusBarStyle&#123;return UIStatusBarStyleLightContent;&#125;//设置返回按钮样式- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;UIBarButtonItem *backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@\"返回\" style:UIBarButtonItemStylePlain target:self action:@selector(backBarButtonItemAction)];viewController.navigationItem.backBarButtonItem = backBarButtonItem;&#125;- (void)backBarButtonItemAction&#123;[self popViewControllerAnimated:YES];&#125;- (void)didReceiveMemoryWarning &#123;[super didReceiveMemoryWarning];// Dispose of any resources that can be recreated.&#125;@end 4.4.2 tabBarController封装#import \"RootTabViewController.h\"#import \"LWTNavigationViewController.h\"# define kTabbarSelectTintColor [UIColor brownColor]# define kTabbarNormalTintColor [UIColor blackColor]@interface RootTabViewController ()&lt;UITabBarControllerDelegate&gt;@end@implementation RootTabViewController- (void)viewDidLoad &#123;[super viewDidLoad];[self buildUI];// Do any additional setup after loading the view.&#125;/**构建视图*/- (void)buildUI&#123;self.tabBar.translucent = NO;self.tabBar.backgroundImage = [CommonMethods createImageWithColor:[UIColor clearColor]];self.tabBar.shadowImage = [CommonMethods createImageWithColor:[UIColor grayColor]];NSArray * normalItems = @[@\"home_gray\",@\"circle_gray\",@\"me\"];NSArray * selectItmes = @[@\"home_blue\",@\"circle_blue\",@\"me_blue\"];NSArray * controllClass = @[@\"HomePageViewController\",@\"MessageViewController\",@\"MyViewController\"];self.delegate = self;NSArray * itemTitles = @[@\"首页\",@\"信息\",@\"我\"];NSMutableArray * controllers = [[NSMutableArray alloc]init];for (int i = 0; i &lt; normalItems.count; i++)&#123;UIViewController * homeview =[[NSClassFromString(controllClass[i]) alloc]init];LWTNavigationViewController * navigation =[[LWTNavigationViewController alloc]initWithRootViewController:homeview];navigation.tabBarItem.image = [[UIImage imageNamed:normalItems[i]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];navigation.tabBarItem.selectedImage = [[UIImage imageNamed:selectItmes[i]] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];navigation.tabBarItem.titlePositionAdjustment = UIOffsetMake(0,-3);[controllers addObject:navigation];// 设置文字的样式NSMutableDictionary *textAttrs = [NSMutableDictionary dictionary];textAttrs[NSForegroundColorAttributeName] = kTabbarNormalTintColor;NSMutableDictionary *selectTextAttrs = [NSMutableDictionary dictionary];selectTextAttrs[NSForegroundColorAttributeName] = kTabbarSelectTintColor;[homeview.tabBarItem setTitleTextAttributes:textAttrs forState:UIControlStateNormal];[homeview.tabBarItem setTitleTextAttributes:selectTextAttrs forState:UIControlStateSelected];// 设置tabbaritem 的titlenavigation.tabBarItem.title = itemTitles[i];&#125;self.viewControllers = controllers;&#125;@end 4.5 第三方库的封装4.5.1 网络框架//基本参数设置+ (AFHTTPSessionManager *)httpManager&#123;//获取请求对象AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];// 设置请求格式manager.requestSerializer = [AFJSONRequestSerializer serializer];// 设置返回格式manager.responseSerializer = [AFHTTPResponseSerializer serializer];[manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"Accept\"];[manager.requestSerializer setValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];manager.requestSerializer.timeoutInterval = RequestTimeOut;return manager;&#125;//请求处理+ (void)postParameters:(id)parameterssuccess:(void (^)(NSDictionary *resDict))successfailure:(void (^)(NSError *error))failure&#123;// if ([[AFNetworkReachabilityManager sharedManager] networkReachabilityStatus] &lt;= 0) &#123;// [MBProgressHUD showMessageInWindow:@\"网络无连接\" afterDelayHide:AfterDelayHide];// return;// &#125;AFHTTPSessionManager *manager = [self httpManager];//开始请求[manager POST:BaseURLStringparameters:parametersprogress:^(NSProgress * _Nonnull uploadProgress) &#123;&#125;success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123;NSMutableDictionary *resDict = (NSMutableDictionary *)[responseObject mj_JSONObject];// NSDictionary *dict = [HttpManager checkResultVaild:resDict withFunction:parameters[@\"function\"]];//这里可以处理数据 针对接口返回的特定参数进行处理，如单点登录等需求NSLog(@\"\\n接口：%@\\n返回数据：%@\",parameters[@\"function\"],[[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding]);success(resDict);&#125;failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;failure(error);NSLog(@\"\\n当前接口：%@\\n错误信息：%@\",parameters[@\"function\"],error);&#125;];&#125; 4.5.2 其他第三方UM、HUD等很多第三方框架，都需要进行封装，针对自己app需求进行配置，使用起来就比较方便。 Demo有什么建议可以提出来，有更好的欢迎探讨，不定期更新demo下载 参考文中的内容有参考过以下文章，大家可以参考下多个Target管理CocoaPods安装教程Pch 文件的正确使用iOS黑魔法－Method Swizzling手把手教你iOS项目基本框架","categories":[],"tags":[]},{"title":"TextView添加链接","slug":"textView","date":"2017-02-21T08:01:05.000Z","updated":"2017-04-25T09:23:19.000Z","comments":true,"path":"2017/02/21/textView/","link":"","permalink":"https://winterliao.github.io/2017/02/21/textView/","excerpt":"","text":"有时候我们需要实现一行文中中某些文字带有点击的功能，大多数情况下会采用label和button结合实现或者第三方富文本label，其实用textView添加链接实现起来非常方便。实现如下效果:需要设置得文字 NSString *text =@\"我同意《XX在线服务协议》及《XX在线用户信息及隐私保护规则》\";NSMutableAttributedString *MAttributedString = [[NSMutableAttributedString alloc] initWithString:text];//《XX在线服务协议》 NSRange range1 = NSMakeRange(3, 10); [MAttributedString addAttributes:@&#123;NSLinkAttributeName:[NSURL URLWithString:@\"string1://\"] &#125; range:range1]; //《XX在线用户信息及隐私保护规则》 NSRange range2 = NSMakeRange(14, 17); [MAttributedString addAttributes:@&#123;NSLinkAttributeName:[NSURL URLWithString:@\"string2://\"]&#125;range:range2]; [MAttributedString endEditing]; textView的设置 UITextView *textView = [[UITextView alloc]initWithFrame:CGRectMake(20,100, SCREEN_WIDTH - 20,50)];textView.font = [UIFont systemFontOfSize:20];textView.scrollEnabled = NO;textView.textContainerInset = UIEdgeInsetsMake(0, 0,2,0);textView.text = text;textView.textColor = [UIColor blackColor];//必须设为NO不然不能响应点击事件textView.editable = NO;//设置链接的属性 设置那一段颜色NSDictionary *linkAttributes =@&#123; NSForegroundColorAttributeName:[UIColor redColor]&#125;;textView.linkTextAttributes = linkAttributes;/** 设置自动检测类型为链接网址. */textView.dataDetectorTypes = UIDataDetectorTypeAll;textView.delegate = self;textView.attributedText = MAttributedString;[self.view addSubview:textView]; 那两段文字的点击事件，在UItextView Delegate中实现 - (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange&#123; // 在代理方法回调的时候，如果没有“://”的话，在[URL scheme]方法里取不到特定的值，一句话://前面的才是最重要的标识符 if ([[URL scheme] rangeOfString:@\"string1\"].location != NSNotFound) &#123; NSLog(@\"点击《XX在线服务协议》\"); return NO; &#125; else if ([[URL scheme] rangeOfString:@\"string2\"].location != NSNotFound)&#123; NSLog(@\"点击《XX在线用户信息及隐私保护规则》\"); return NO; &#125; return YES;&#125;","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://winterliao.github.io/tags/iOS/"}]},{"title":"使用Lottie简单实现动画","slug":"hello-world","date":"2016-12-24T15:11:05.000Z","updated":"2017-04-25T09:27:22.000Z","comments":true,"path":"2016/12/24/hello-world/","link":"","permalink":"https://winterliao.github.io/2016/12/24/hello-world/","excerpt":"","text":"Lottie是Airbnb最近推出的开源项目,设计师只要使用AE把动画做出来,再使用Bodymovin插件就能把动画文件导出成json文件。这个json文件中包括动画的点的坐标,运行的轨迹等数据,在项目中引用这个开源库,使用这个json文件（或者URL）就可以实现动画,极快的完成了一个动画效果,要知道,简单的一个动画,用代码实现起来都需要花一定的时间。 跨平台使用这个库是跨平台的,只要设计出一套json动画描述文件,就可以支持Android,iOS,ReactNative,iOS目前是支持iOS8及以上的,同时支持OC和Swift,下面讲iOS的用法。 支持使用Cocoapods和Carthage导入pod 'lottie-ios'pod install github \"airbnb/lottie-ios\" \"master\"carthage update 简单代码实现加载json本地文件 //加载本地的json描述文件LAAnimationView *animation = [LAAnimationView animationNamed:@\"Lottie\"];[self.view addSubview:animation];//循环播放animation.loopAnimation = YES;//1.直接开启[animation playWithCompletion:^(BOOL animationFinished) &#123; // Do Something&#125;];//2.手动开启//设置动画的进度//animation.animationProgress = 0//[animation play]//手动关闭//[animation pause] 加载URL LAAnimationView *animation = [[LAAnimationView alloc] initWithContentsOfURL:[NSURL URLWithString:URL]];[self.view addSubview:animation]; 增加转场动画#pragma mark -- View Controller Transitioning\\\\- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source &#123; LAAnimationTransitionController *animationController = [[LAAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition1\" fromLayerNamed:@\"outLayer\" toLayerNamed:@\"inLayer\"]; return animationController;&#125;\\\\- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed &#123; LAAnimationTransitionController *animationController = [[LAAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition2\" fromLayerNamed:@\"outLayer\" toLayerNamed:@\"inLayer\"]; return animationController;&#125; Swift实现let animationView = LAAnimationView.animationNamed(\"hamburger\")self.view.addSubview(animationView!)animationView?.play(completion: &#123; (finished) in // Do Something&#125;) 相关文章这个项目碉堡了 Airbnb/Lottie-iOS","categories":[],"tags":[]}]}