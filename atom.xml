<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>winter</title>
  <subtitle>我只是个小开发仔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://winterliao.github.io/"/>
  <updated>2017-07-04T09:20:52.000Z</updated>
  <id>https://winterliao.github.io/</id>
  
  <author>
    <name>廖文韬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>attrubuteTextAction</title>
    <link href="https://winterliao.github.io/2017/07/04/attrubuteTextAction/"/>
    <id>https://winterliao.github.io/2017/07/04/attrubuteTextAction/</id>
    <published>2017-07-04T08:37:41.000Z</published>
    <updated>2017-07-04T09:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ok841h9gr.bkt.clouddn.com/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92.gif" alt=""></p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>字符串中某段区域需要添加点击效果或者字符串中添加可点击的按钮。<br>解决：给UILabel添加点击事件的category。</p>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><h4 id="用字符串标记需要点击的位置"><a href="#用字符串标记需要点击的位置" class="headerlink" title="用字符串标记需要点击的位置"></a>用字符串标记需要点击的位置</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableAttributedString</span> *attributedString1 = [[<span class="built_in">NSMutableAttributedString</span> alloc]initWithString:<span class="string">@"这是一串可点击的字符串，通过字符串进行标记了点击"</span>];</div><div class="line">[attributedString1 addAttribute:<span class="built_in">NSFontAttributeName</span> value:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>] range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attributedString1.length)];</div><div class="line">[attributedString1 addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> greenColor] range:<span class="built_in">NSMakeRange</span>(<span class="number">5</span>, <span class="number">2</span>)];</div><div class="line">[attributedString1 addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> blueColor] range:<span class="built_in">NSMakeRange</span>(attributedString1.length - <span class="number">2</span>, <span class="number">2</span>)];</div><div class="line">_textLabel1.attributedText = attributedString1;</div><div class="line">[_textLabel1 addAttributeActionWithStrings:@[<span class="string">@"点击"</span>,<span class="string">@"点击"</span>] tapTargetAction:^(<span class="built_in">NSString</span> *string, <span class="built_in">NSRange</span> range, <span class="built_in">NSInteger</span> index) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"点击字符串:%@ 范围在%@，第%ld个"</span>,string,<span class="built_in">NSStringFromRange</span>(range),index+<span class="number">1</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="用范围标记需要点击的位置（实现插入按钮）"><a href="#用范围标记需要点击的位置（实现插入按钮）" class="headerlink" title="用范围标记需要点击的位置（实现插入按钮）"></a>用范围标记需要点击的位置（实现插入按钮）</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableAttributedString</span> *attributedString2 = [[<span class="built_in">NSMutableAttributedString</span> alloc]initWithString:<span class="string">@"使用范围来进行标记的字符串，可以在字符串在添加图片进行点击，实现再字符串中插入按钮的效果,有颜色的都可点击"</span>];</div><div class="line"><span class="built_in">NSRange</span> rang1 = [attributedString2.string rangeOfString:<span class="string">@"标记"</span>];</div><div class="line"><span class="built_in">NSRange</span> rang2 = [attributedString2.string rangeOfString:<span class="string">@"点击"</span>];</div><div class="line"><span class="built_in">NSRange</span> rang3 = [attributedString2.string rangeOfString:<span class="string">@"按钮"</span>];</div><div class="line"></div><div class="line">[attributedString2 addAttribute:<span class="built_in">NSFontAttributeName</span> value:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">15</span>] range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attributedString2.length)];</div><div class="line">[attributedString2 addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> greenColor] range:rang1];</div><div class="line">[attributedString2 addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> blueColor] range:rang2];</div><div class="line"></div><div class="line"><span class="comment">//添加图片附件(插入图片，添加点击事件)</span></div><div class="line"><span class="built_in">NSTextAttachment</span> *attach = [[<span class="built_in">NSTextAttachment</span> alloc] init];</div><div class="line">attach.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"abc.jpg"</span>];</div><div class="line">attach.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">15</span>);</div><div class="line"><span class="built_in">NSAttributedString</span> *attachString = [<span class="built_in">NSAttributedString</span> attributedStringWithAttachment:attach];</div><div class="line">[attributedString2 insertAttributedString:attachString atIndex:rang3.location];</div><div class="line">_textLabel2.attributedText = attributedString2;</div><div class="line">[_textLabel2 addAttributeActionWithRange:[<span class="built_in">NSArray</span> arrayWithObjects:[<span class="built_in">NSValue</span> valueWithRange:rang1],[<span class="built_in">NSValue</span> valueWithRange:rang2],[<span class="built_in">NSValue</span> valueWithRange:rang3],<span class="literal">nil</span>] tapTargetAction:^(<span class="built_in">NSString</span> *string, <span class="built_in">NSRange</span> range, <span class="built_in">NSInteger</span> index) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"点击字符串:%@ 范围在%@，第%ld个"</span>,string,<span class="built_in">NSStringFromRange</span>(range),index+<span class="number">1</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h3><p><a href="https://github.com/winterLiao/LWTAttributeTextAction/">github下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ok841h9gr.bkt.clouddn.com/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift与OC的差异</title>
    <link href="https://winterliao.github.io/2017/03/18/swift-different/"/>
    <id>https://winterliao.github.io/2017/03/18/swift-different/</id>
    <published>2017-03-18T08:22:37.000Z</published>
    <updated>2017-06-13T08:51:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Swift刚出来时就学习过，之后也一直没有用Swift写过项目，很快就忘记了，最近又花了点时间过了一遍官方的学习文档。<br><a href="http://blog.csdn.net/IT_201607/article/category/6709557">学习笔记</a></p>
<h2 id="Swift与OC的差异"><a href="#Swift与OC的差异" class="headerlink" title="Swift与OC的差异"></a>Swift与OC的差异</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul>
<li>声明使用let和var关键字，Swift可以推出出类型,let声明的常量不可修改，var声明变量。</li>
<li>Swift对数据要求严格，不存在隐式转换，强制转换格式：int(a)</li>
<li>使用整数类型的 min 和 max 属性来获取对应类型的最小值和最大值</li>
<li>BOOL类型只有true和false，不再是非0即真，Swift的赋值运算符没有返回值</li>
<li>Swift增加了元组类型。元组把多个值组合成一个复合值，元组内的值可以使任意类型，并不要求是相同类型。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。</li>
<li>Swift增加了可选类型，用于处理值缺失的情况。可选类型表示：有值或无值。swift定义的常量和变量是没有默认值的，所以引入了可选的概念，用?修饰变量，标示该变量的值可能为空也可能为某个值，然后获取的时候用!强制解析，此时必须有值，否则报运行时错误。涉及到可选绑定、强制解析和隐式解析等内容。</li>
<li>Swift范围运算符：闭区间运算符（a…b），半开区间运算符（a..&lt;b）</li>
<li>结构体也可以定义方法，和类非常相似</li>
<li>Swift新增泛型的使用，使用占位类型名来代替实际类型名<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3></li>
<li>使用<code>+</code>链接字符串</li>
<li>字符串/字符可以用等于操作符(==)和不等于操作符(!=)进行比较</li>
<li>使用下标，下标可以定义在类、结构体和枚举中，是访问集合，列表或序列中元素的快捷方式。<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3></li>
<li>Switch语句： Swift 中，可匹配各种类型，当匹配的 case分支中的代码执行完毕后，程序会终止switch语句，而不会继续执行下一个 case分支。不用像OC一样使用break跳出。还可以使用where语句进行条件判断</li>
<li>循环语句中必须加{} ，即使只有一行代码<h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3></li>
<li>函数格式 <code>func Sum (num1:Int,num2:Int)</code> –&gt;Int{}，与oc一样函数具有有参数、无参数、有返回值、无返回值等多种类型，也可作为参数或返回值。</li>
<li>Swift特有的闭包表达式，<code>{ (parameters) -&gt; returnType in
  statements
}</code><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3></li>
<li>新增计算属性，计算属性不直接存储值，而是提供一个 getter 和一个可选的setter，来间接获取和设置其他属性或变量的值。</li>
<li>属性观察器，willSet 在新的值被设置之前调用<br>didSet 在新的值被设置之后立即调用<br>willSet 观察器会将新的属性值作为常量参数传入，在 willSet 的实现代码中可以为这个参数指定一个名称，如果不指定则参数仍然可用，这时使用默认名称 newValue 表示。<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3>当然还有很多的差异没有列出来，这里只是简单的归纳了一部分常遇到的。</li>
<li>Swift只有一个.swift的文件，没有OC的.h和.m文件，不再需要引入头文件来声明。</li>
<li>每条语句不需要使用<code>；</code>结尾,除非是一行中包含多条语句。</li>
<li>Swift支持多行嵌套注释，注释嵌套<code>/*/**/*/</code></li>
</ul>
<h2 id="Swift封装的控件"><a href="#Swift封装的控件" class="headerlink" title="Swift封装的控件"></a>Swift封装的控件</h2><p>浏览完文档，随意封装了些控件<br><a href="https://github.com/winterLiao/LWTSegementController">类新闻客户端</a><br><a href="https://github.com/winterLiao/GifLoadView">动画加载gif图</a><br><a href="https://github.com/winterLiao/WTDatePickerView">日期选择器</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Swift刚出来时就学习过，之后也一直没有用Swift写过项目，很快就忘记了，最近又花了点时间过了一遍官方的学习文档。&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/IT_201607/article/category/6709557&quot;&gt;学习笔记&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS APP框架搭建</title>
    <link href="https://winterliao.github.io/2017/03/13/frameWork/"/>
    <id>https://winterliao.github.io/2017/03/13/frameWork/</id>
    <published>2017-03-13T13:50:12.000Z</published>
    <updated>2017-04-25T09:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>MVC设计模式，纯代码的框架。</p>
<h2 id="1-新建工程"><a href="#1-新建工程" class="headerlink" title="1.新建工程"></a>1.新建工程</h2><h3 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h3><p><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E5%88%A0%E9%99%A4.png" alt="删除">   </p>
<ul>
<li>删除无用的文件(Main.storyboard,ViewController)</li>
<li>删除plist文件中Main storyboard file base name一项</li>
<li>appdelegate进行修改</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line"><span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</div><div class="line"><span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line"></div><div class="line"></div><div class="line">[<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-创建不同的target管理工程"><a href="#1-2-创建不同的target管理工程" class="headerlink" title="1.2 创建不同的target管理工程"></a>1.2 创建不同的target管理工程</h3><p>有时候我们需要多个版本，开发版、测试版或者线上版，或因渠道不同需要区分企业版，AppStore版等。这个时候使用target来管理就比较方便</p>
<h4 id="1-2-1-生成"><a href="#1-2-1-生成" class="headerlink" title="1.2.1 生成"></a>1.2.1 生成</h4><p><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E5%A4%9Atarget.png" alt="多target"></p>
<h4 id="1-2-2-修改名字"><a href="#1-2-2-修改名字" class="headerlink" title="1.2.2 修改名字"></a>1.2.2 修改名字</h4><p>需要修改下名字target、scheme、info.plist三项的名字，主要用来区分下版本</p>
<blockquote>
<p>注意:修改了info.plist名字需要修改新建的target的配置信息文件，让其能找到info.plist文件</p>
</blockquote>
<h4 id="1-2-3-修改下工程配置文件"><a href="#1-2-3-修改下工程配置文件" class="headerlink" title="1.2.3 修改下工程配置文件"></a>1.2.3 修改下工程配置文件</h4><p><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E5%A4%9Ataget2.png" alt=""><br>就可以这样使用了：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DEVELOPMENT</span></div><div class="line">NSLog(@<span class="string">"development"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">NSLog(@<span class="string">"release"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<h4 id="使用方法可参考-多个Target管理"><a href="#使用方法可参考-多个Target管理" class="headerlink" title="使用方法可参考:多个Target管理"></a>使用方法可参考:<a href="http://blog.csdn.net/fys_0801/article/details/52585954">多个Target管理</a></h4><h3 id="1-3-导入CocoaPods管理依赖库"><a href="#1-3-导入CocoaPods管理依赖库" class="headerlink" title="1.3 导入CocoaPods管理依赖库"></a>1.3 导入CocoaPods管理依赖库</h3><p>自从CocoaPods升级到1.0.1之后,为多个target导入依赖库,之前的link_with语法不能用了,使用如下方法:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div><div class="line">platform <span class="symbol">:ios</span>, ‘<span class="number">7.0</span>’</div><div class="line"></div><div class="line"><span class="comment"># ruby语法</span></div><div class="line"><span class="comment"># target数组 如果有新的target直接加入该数组</span></div><div class="line">targetsArray = [‘MyApp’, ‘MyAppTest’]</div><div class="line"><span class="comment"># 循环</span></div><div class="line">targetsArray.each <span class="keyword">do</span> <span class="params">|t|</span></div><div class="line">target t <span class="keyword">do</span></div><div class="line">pod <span class="string">'MJRefresh'</span>, <span class="string">'~&gt; 3.1.12'</span></div><div class="line">pod <span class="string">'Masonry'</span>, <span class="string">'~&gt; 0.6.1'</span></div><div class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.1.0'</span></div><div class="line">pod <span class="string">'MJExtension'</span></div><div class="line">pod <span class="string">'MBProgressHUD'</span></div><div class="line">pod <span class="string">'SDWebImage'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h4 id="使用方法可参考：CocoaPods安装教程"><a href="#使用方法可参考：CocoaPods安装教程" class="headerlink" title="使用方法可参考：CocoaPods安装教程"></a>使用方法可参考：<a href="http://www.cocoachina.com/ios/20160922/17622.html">CocoaPods安装教程</a></h4><h3 id="1-4-info-plist配置"><a href="#1-4-info-plist配置" class="headerlink" title="1.4 info.plist配置"></a>1.4 info.plist配置</h3><h5 id="1-4-1-开启http的访问权限"><a href="#1-4-1-开启http的访问权限" class="headerlink" title="1.4.1 开启http的访问权限"></a>1.4.1 开启http的访问权限</h5><p>info.plist 中添加以下<br><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-http%E8%AE%BF%E9%97%AE%E5%BC%80%E5%90%AF.png" alt="http访问"></p>
<h4 id="1-4-2-添加应用白名单"><a href="#1-4-2-添加应用白名单" class="headerlink" title="1.4.2 添加应用白名单"></a>1.4.2 添加应用白名单</h4><p>iOS9之后分享等必须添加白名单后才可以打开相关应用。字段值为LSApplicationQueriesSchemes<br><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E7%99%BD%E5%90%8D%E5%8D%95.png" alt="应用白名单"></p>
<h4 id="1-4-3-其他"><a href="#1-4-3-其他" class="headerlink" title="1.4.3 其他"></a>1.4.3 其他</h4><p>设置分享到微信、微博啊等URL Types</p>
<h2 id="2-项目模块化"><a href="#2-项目模块化" class="headerlink" title="2.项目模块化"></a>2.项目模块化</h2><h3 id="2-1-分类各模块"><a href="#2-1-分类各模块" class="headerlink" title="2.1 分类各模块"></a>2.1 分类各模块</h3><p>分类具体按照业务需求去归类，开发前把大体的分类号，主体的文件夹建立真实的文件夹，再把真实的文件夹拖到项目中，这样的好处是，避免了在项目中创建虚拟文件夹，然后导致各类文件都放在一块，不方便查找。<br>大致分类：<br><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""></p>
<h3 id="2-2-导入需要用的第三方库"><a href="#2-2-导入需要用的第三方库" class="headerlink" title="2.2 导入需要用的第三方库"></a>2.2 导入需要用的第三方库</h3><p>先使用CocoaPods导入项目中一些常用的第三方库,后续再根据需求导入，有些无法用CocoaPods导入的或者是一些需要修改库中代码的拖入到工程中Vender文件夹中</p>
<h3 id="2-3-创建pch文件"><a href="#2-3-创建pch文件" class="headerlink" title="2.3 创建pch文件"></a>2.3 创建pch文件</h3><p>这个文件用来包含全局使用的头文件，例如:<br>1.第三方头文件<br>2.全局宏定义<br>3.自定义的头文件包含主题、网络请求地址、全局方法、key等</p>
<h4 id="使用方法参考-Pch-文件的正确使用"><a href="#使用方法参考-Pch-文件的正确使用" class="headerlink" title="使用方法参考: Pch 文件的正确使用"></a>使用方法参考: <a href="http://www.jianshu.com/p/67ce72c4ad6c">Pch 文件的正确使用</a></h4><h2 id="3-全局的宏定义"><a href="#3-全局的宏定义" class="headerlink" title="3 全局的宏定义"></a>3 全局的宏定义</h2><p>具体方法大家可下载demo看下<br><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E5%85%A8%E5%B1%80%E5%AE%9A%E4%B9%892.png" alt="宏定义"></p>
<h3 id="3-1-全局配置参数DefineMacro"><a href="#3-1-全局配置参数DefineMacro" class="headerlink" title="3.1 全局配置参数DefineMacro"></a>3.1 全局配置参数DefineMacro</h3><p>全局宏定义包含一些屏幕宽高、iOS版本、手机类型等<br><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="number">#def</span>ine SCREEN_WIDTH   [UIScreen mainScreen]<span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.width</span></div><div class="line"><span class="number">#def</span>ine SCREENH_HEIGHT [UIScreen mainScreen]<span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.height</span></div><div class="line"><span class="comment">//随机颜色</span></div><div class="line"><span class="number">#def</span>ine KRandomColor [UIColor colorWithRed:arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span> green:arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span> blue:arc4random_uniform(<span class="number">256</span>)/<span class="number">255.0</span> alpha:<span class="number">1.0</span>]</div></pre></td></tr></table></figure></p>
<h3 id="3-2-样式定义DefineTheme"><a href="#3-2-样式定义DefineTheme" class="headerlink" title="3.2 样式定义DefineTheme"></a>3.2 样式定义DefineTheme</h3><p>主要包含样式上的定义,主题颜色、各类字体大小颜色、控件大小等<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">//颜色</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TITLE_COLOR [UIColor blackColor]<span class="comment">//标题颜色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_COLOR [UIColor grayColor]<span class="comment">//正文颜色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TIPTEXT_COLOR UIColorFromRGB(0x888888)<span class="comment">//提示语文本颜色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_GROUNDCOLOR UIColorFromRGB(0xF98B1B)<span class="comment">//主题景色</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKGROUNDCOLOR UIColorFromRGB(0xF7F7F7)<span class="comment">//背景颜色</span></span></div><div class="line"><span class="comment">//字体大小</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TITLEFONT [UIFont systemFontOfSize:18]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTFONT [UIFont systemFontOfSize:16]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TIPTEXTFONT [UIFont systemFontOfSize:12]</span></div></pre></td></tr></table></figure></p>
<h3 id="3-3-API地址DefineRequest"><a href="#3-3-API地址DefineRequest" class="headerlink" title="3.3 API地址DefineRequest"></a>3.3 API地址DefineRequest</h3><p>访问的地址，各个接口的查询<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> DEVELOPMENT <span class="comment">//***************开发版本*************</span></span></div><div class="line"><span class="comment">//****************测试环境***********</span></div><div class="line"><span class="comment">//app服务重构测试</span></div><div class="line"><span class="comment">//#define BaseURLString   @"http://www-test.baidu.com/rest/post"//beta</span></div><div class="line"><span class="comment">//#define BaseURLString @"http://docker-branch02-web-tomcat.baidu.com:8080/rest/post"//分之域名</span></div><div class="line"><span class="comment">//****************开发环境(个人服务器)************</span></div><div class="line"><span class="comment">//后台XXX</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BaseURLString  @<span class="meta-string">"http://192.168.1.175:8080/baidu/rest/post"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>          <span class="comment">//**************生产版本**************</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BaseURLString @<span class="meta-string">"https://www.baidu.com/rest/post"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//****************接口说明************</span></div><div class="line"><span class="comment">//获取用户信息</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Request_type_getUserInfo @<span class="meta-string">"getUserInfo"</span></span></div><div class="line"><span class="comment">//首页广告</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Request_type_queryBannerByType @<span class="meta-string">"queryBannerByType"</span></span></div></pre></td></tr></table></figure></p>
<h2 id="4-初期代码编写"><a href="#4-初期代码编写" class="headerlink" title="4. 初期代码编写"></a>4. 初期代码编写</h2><p><img src="http://ok841h9gr.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA-%E5%85%AC%E5%85%B1%E7%B1%BB.png" alt="公共类"></p>
<h3 id="4-1-Category"><a href="#4-1-Category" class="headerlink" title="4.1 Category"></a>4.1 Category</h3><h4 id="4-1-1-Method-swizzling"><a href="#4-1-1-Method-swizzling" class="headerlink" title="4.1.1 Method swizzling"></a>4.1.1 Method swizzling</h4><p>为Controller添加一些方法，即可省略继承baseViewController的麻烦，还可以对各工厂类进行操作</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIViewController+swizzling.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">swizzling</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">Method fromMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(viewDidLoad));</div><div class="line">Method toMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(swizzlingViewDidLoad));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(swizzlingViewDidLoad), method_getImplementation(toMethod), method_getTypeEncoding(toMethod))) &#123;</div><div class="line">method_exchangeImplementations(fromMethod, toMethod);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 我们自己实现的方法，也就是和self的viewDidLoad方法进行交换的方法。</span></div><div class="line">- (<span class="keyword">void</span>)swizzlingViewDidLoad &#123;</div><div class="line"><span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, <span class="keyword">self</span>.class];</div><div class="line"><span class="keyword">if</span>(![str containsString:<span class="string">@"UI"</span>])&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"统计打点 : %@"</span>, <span class="keyword">self</span>.title);</div><div class="line">&#125;</div><div class="line">[<span class="keyword">self</span> swizzlingViewDidLoad];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="4-1-2-appDelegate添加category"><a href="#4-1-2-appDelegate添加category" class="headerlink" title="4.1.2 appDelegate添加category"></a>4.1.2 appDelegate添加category</h4><p>用以简化appDelegate中代码</p>
<h5 id="AppDelegate-ViewController-h"><a href="#AppDelegate-ViewController-h" class="headerlink" title="AppDelegate+ViewController.h"></a>AppDelegate+ViewController.h</h5><figure class="highlight inform7"><table><tr><td class="code"><pre><div class="line">- (void)setAppWindows</div><div class="line">&#123;</div><div class="line">self.window = <span class="comment">[<span class="comment">[UIWindow alloc]</span> initWithFrame:<span class="comment">[<span class="comment">[UIScreen mainScreen]</span> bounds]</span>]</span>;</div><div class="line">self.window.backgroundColor = <span class="comment">[UIColor whiteColor]</span>;</div><div class="line"></div><div class="line"><span class="comment">[<span class="comment">[UINavigationBar appearance]</span> setTitleTextAttributes:@&#123;NSForegroundColorAttributeName: <span class="comment">[UIColor whiteColor]</span>&#125;]</span>;</div><div class="line"></div><div class="line"><span class="comment">[self.window makeKeyAndVisible]</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setRootViewController</div><div class="line">&#123;</div><div class="line">AppDelegate *app = (AppDelegate *)<span class="comment">[<span class="comment">[UIApplication sharedApplication]</span> delegate]</span>;</div><div class="line">app.window.rootViewController = <span class="comment">[<span class="comment">[RootTabViewController alloc]</span> init]</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="AppDelegate-AppService-h"><a href="#AppDelegate-AppService-h" class="headerlink" title="AppDelegate+AppService.h"></a>AppDelegate+AppService.h</h5><p>需要处理的各类服务都可以添加在这<br><figure class="highlight dart"><table><tr><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/**</div><div class="line"><span class="bullet">*  </span>系统配置</div><div class="line">*/</span></span></div><div class="line">- (<span class="keyword">void</span>)systemConfigration;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</div><div class="line"><span class="bullet">*  </span>友盟注册</div><div class="line">*/</span></span></div><div class="line">- (<span class="keyword">void</span>)registerUmeng;</div><div class="line"><span class="comment"><span class="markdown">/**</div><div class="line"><span class="bullet">*  </span>个推注册</div><div class="line">*/</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)registerGeiTui;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</div><div class="line"><span class="bullet">*  </span>检查更新</div><div class="line">*/</span></span></div><div class="line">- (<span class="keyword">void</span>)checkAppUpDataWithshowOption:(BOOL)showOption;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</div><div class="line"><span class="bullet">*  </span>获取用户信息</div><div class="line">*/</span></span></div><div class="line">- (<span class="keyword">void</span>)getUserData;</div></pre></td></tr></table></figure></p>
<h3 id="4-2-DataMange"><a href="#4-2-DataMange" class="headerlink" title="4.2 DataMange"></a>4.2 DataMange</h3><ul>
<li>存放对文件的处理方法，文件的路径</li>
<li>数据库的处理</li>
<li>NSUserDefault的处理<h3 id="4-3-Other"><a href="#4-3-Other" class="headerlink" title="4.3 Other"></a>4.3 Other</h3>建一个类存放比较杂乱的一些公共方法<figure class="highlight mipsasm"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**验证该字符串是否是6-16位字母和数字组合*/</span></div><div class="line">+ (<span class="keyword">BOOL)checkIsDigitalAndLetter:(NSString </span>*)string<span class="comment">;</span></div><div class="line"><span class="comment">/**利用正则表达式验证手机号码*/</span></div><div class="line">+ (<span class="keyword">BOOL)checkTel:(NSString </span>*)str<span class="comment">;</span></div><div class="line"><span class="comment">/**利用正则表达式验证邮箱*/</span></div><div class="line">+ (<span class="keyword">BOOL)checkEmail:(NSString </span>*)email<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-4-UITools"><a href="#4-4-UITools" class="headerlink" title="4.4 UITools"></a>4.4 UITools</h3><p>一些公共控件的封装，常用的一些控件进行封装（弹窗、广告轮播等），方便以后统一修改</p>
<h4 id="4-4-1-NavigationViewController封装"><a href="#4-4-1-NavigationViewController封装" class="headerlink" title="4.4.1 NavigationViewController封装"></a>4.4.1 NavigationViewController封装</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LWTNavigationViewController</span> ()&lt;<span class="title">UINavigationControllerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> popDelegate;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LWTNavigationViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">[<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line"><span class="keyword">self</span>.popDelegate = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</div><div class="line"><span class="keyword">self</span>.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line"><span class="comment">//navigationBar样式设置</span></div><div class="line"><span class="keyword">self</span>.navigationBar.barTintColor = MAIN_GROUNDCOLOR;</div><div class="line">[<span class="keyword">self</span>.navigationBar setTitleTextAttributes:@&#123;<span class="built_in">NSForegroundColorAttributeName</span> : WHITCOLOR, <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">18</span>]&#125;];</div><div class="line">[<span class="keyword">self</span>.navigationBar setTintColor:WHITCOLOR];    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//解决手势失效问题</span></div><div class="line">- (<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController didShowViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (viewController == <span class="keyword">self</span>.viewControllers[<span class="number">0</span>]) &#123;</div><div class="line"><span class="keyword">self</span>.interactivePopGestureRecognizer.delegate = <span class="keyword">self</span>.popDelegate;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">self</span>.interactivePopGestureRecognizer.delegate = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//push时隐藏tabbar</span></div><div class="line">- (<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count &gt; <span class="number">0</span>) &#123;</div><div class="line">viewController.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line">[<span class="keyword">super</span> pushViewController:viewController animated:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置样式</span></div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置返回按钮样式</span></div><div class="line">- (<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController willShowViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="built_in">UIBarButtonItem</span> *backBarButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="string">@"返回"</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(backBarButtonItemAction)];</div><div class="line">viewController.navigationItem.backBarButtonItem = backBarButtonItem;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)backBarButtonItemAction</div><div class="line">&#123;</div><div class="line">[<span class="keyword">self</span> popViewControllerAnimated:<span class="literal">YES</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">[<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line"><span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="4-4-2-tabBarController封装"><a href="#4-4-2-tabBarController封装" class="headerlink" title="4.4.2 tabBarController封装"></a>4.4.2 tabBarController封装</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"RootTabViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LWTNavigationViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="meta"># define kTabbarSelectTintColor [UIColor brownColor]</span></div><div class="line"><span class="meta"># define kTabbarNormalTintColor [UIColor blackColor]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RootTabViewController</span> ()&lt;<span class="title">UITabBarControllerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RootTabViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">[<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">[<span class="keyword">self</span> buildUI];</div><div class="line"><span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**构建视图*/</span></div><div class="line">- (<span class="keyword">void</span>)buildUI&#123;</div><div class="line"></div><div class="line"><span class="keyword">self</span>.tabBar.translucent     = <span class="literal">NO</span>;</div><div class="line"><span class="keyword">self</span>.tabBar.backgroundImage = [CommonMethods createImageWithColor:[<span class="built_in">UIColor</span> clearColor]];</div><div class="line"><span class="keyword">self</span>.tabBar.shadowImage     = [CommonMethods createImageWithColor:[<span class="built_in">UIColor</span> grayColor]];</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> * normalItems       = @[<span class="string">@"home_gray"</span>,<span class="string">@"circle_gray"</span>,<span class="string">@"me"</span>];</div><div class="line"><span class="built_in">NSArray</span> * selectItmes       = @[<span class="string">@"home_blue"</span>,<span class="string">@"circle_blue"</span>,<span class="string">@"me_blue"</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> * controllClass     = @[<span class="string">@"HomePageViewController"</span>,<span class="string">@"MessageViewController"</span>,<span class="string">@"MyViewController"</span>];</div><div class="line"><span class="keyword">self</span>.delegate               = <span class="keyword">self</span>;</div><div class="line"><span class="built_in">NSArray</span> * itemTitles        = @[<span class="string">@"首页"</span>,<span class="string">@"信息"</span>,<span class="string">@"我"</span>];</div><div class="line"><span class="built_in">NSMutableArray</span> * controllers = [[<span class="built_in">NSMutableArray</span> alloc]init];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; normalItems.count; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">UIViewController</span> * homeview =[[<span class="built_in">NSClassFromString</span>(controllClass[i]) alloc]init];</div><div class="line">LWTNavigationViewController * navigation =[[LWTNavigationViewController alloc]initWithRootViewController:homeview];</div><div class="line">navigation.tabBarItem.image                     = [[<span class="built_in">UIImage</span> imageNamed:normalItems[i]] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">navigation.tabBarItem.selectedImage             = [[<span class="built_in">UIImage</span> imageNamed:selectItmes[i]] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">navigation.tabBarItem.titlePositionAdjustment   = <span class="built_in">UIOffsetMake</span>(<span class="number">0</span>,<span class="number">-3</span>);</div><div class="line">[controllers addObject:navigation];</div><div class="line"></div><div class="line"><span class="comment">// 设置文字的样式</span></div><div class="line"><span class="built_in">NSMutableDictionary</span> *textAttrs                  = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">textAttrs[<span class="built_in">NSForegroundColorAttributeName</span>]       = kTabbarNormalTintColor;</div><div class="line"><span class="built_in">NSMutableDictionary</span> *selectTextAttrs            = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">selectTextAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = kTabbarSelectTintColor;</div><div class="line">[homeview.tabBarItem setTitleTextAttributes:textAttrs forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">[homeview.tabBarItem setTitleTextAttributes:selectTextAttrs forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line"><span class="comment">// 设置tabbaritem 的title</span></div><div class="line">navigation.tabBarItem.title                     = itemTitles[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>.viewControllers = controllers;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="4-5-第三方库的封装"><a href="#4-5-第三方库的封装" class="headerlink" title="4.5 第三方库的封装"></a>4.5 第三方库的封装</h3><h4 id="4-5-1-网络框架"><a href="#4-5-1-网络框架" class="headerlink" title="4.5.1 网络框架"></a>4.5.1 网络框架</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">//基本参数设置</span></div><div class="line">+ (AFHTTPSessionManager *)httpManager&#123;</div><div class="line"><span class="comment">//获取请求对象</span></div><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line"><span class="comment">// 设置请求格式</span></div><div class="line">manager.requestSerializer = [AFJSONRequestSerializer serializer];</div><div class="line"><span class="comment">// 设置返回格式</span></div><div class="line">manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">[manager.requestSerializer setValue:<span class="string">@"application/json"</span> forHTTPHeaderField:<span class="string">@"Accept"</span>];</div><div class="line">[manager.requestSerializer setValue:<span class="string">@"application/json"</span> forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</div><div class="line">manager.requestSerializer.timeoutInterval = RequestTimeOut;</div><div class="line"><span class="keyword">return</span> manager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//请求处理</span></div><div class="line">+ (<span class="keyword">void</span>)postParameters:(<span class="keyword">id</span>)parameters</div><div class="line">success:(<span class="keyword">void</span> (^)(<span class="built_in">NSDictionary</span> *resDict))success</div><div class="line">failure:(<span class="keyword">void</span> (^)(<span class="built_in">NSError</span> *error))failure</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="comment">//    if ([[AFNetworkReachabilityManager sharedManager] networkReachabilityStatus] &lt;= 0) &#123;</span></div><div class="line"><span class="comment">//        [MBProgressHUD showMessageInWindow:@"网络无连接" afterDelayHide:AfterDelayHide];</span></div><div class="line"><span class="comment">//        return;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">AFHTTPSessionManager *manager = [<span class="keyword">self</span> httpManager];</div><div class="line"><span class="comment">//开始请求</span></div><div class="line">[manager POST:BaseURLString</div><div class="line">parameters:parameters</div><div class="line">progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</div><div class="line">&#125;</div><div class="line">success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line"><span class="built_in">NSMutableDictionary</span> *resDict = (<span class="built_in">NSMutableDictionary</span> *)[responseObject mj_JSONObject];</div><div class="line"><span class="comment">//              NSDictionary *dict = [HttpManager checkResultVaild:resDict withFunction:parameters[@"function"]];</span></div><div class="line"></div><div class="line"><span class="comment">//这里可以处理数据 针对接口返回的特定参数进行处理，如单点登录等需求</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\n接口：%@\n返回数据：%@"</span>,parameters[<span class="string">@"function"</span>],[[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>]);</div><div class="line"></div><div class="line">success(resDict);</div><div class="line">&#125;</div><div class="line">failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">failure(error);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\n当前接口：%@\n错误信息：%@"</span>,parameters[<span class="string">@"function"</span>],error);</div><div class="line">&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-5-2-其他第三方"><a href="#4-5-2-其他第三方" class="headerlink" title="4.5.2 其他第三方"></a>4.5.2 其他第三方</h4><p>UM、HUD等很多第三方框架，都需要进行封装，针对自己app需求进行配置，使用起来就比较方便。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>有什么建议可以提出来，有更好的欢迎探讨，不定期更新<br><a href="https://github.com/winterLiao/MyAppDemo">demo下载</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文中的内容有参考过以下文章，大家可以参考下<br><a href="http://blog.csdn.net/fys_0801/article/details/52585954">多个Target管理</a><br><a href="http://www.cocoachina.com/ios/20160922/17622.html">CocoaPods安装教程</a><br><a href="http://www.jianshu.com/p/67ce72c4ad6c">Pch 文件的正确使用</a><br><a href="http://www.jianshu.com/p/ff19c04b34d0">iOS黑魔法－Method Swizzling</a><br><a href="http://www.jianshu.com/p/0c6f3f4b3b34">手把手教你iOS项目基本框架</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC设计模式，纯代码的框架。&lt;/p&gt;
&lt;h2 id=&quot;1-新建工程&quot;&gt;&lt;a href=&quot;#1-新建工程&quot; class=&quot;headerlink&quot; title=&quot;1.新建工程&quot;&gt;&lt;/a&gt;1.新建工程&lt;/h2&gt;&lt;h3 id=&quot;1-1-新建项目&quot;&gt;&lt;a href=&quot;#1-1-新建
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TextView添加链接</title>
    <link href="https://winterliao.github.io/2017/02/21/textView/"/>
    <id>https://winterliao.github.io/2017/02/21/textView/</id>
    <published>2017-02-21T08:01:05.000Z</published>
    <updated>2017-04-25T09:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要实现一行文中中某些文字带有点击的功能，大多数情况下会采用label和button结合实现或者第三方富文本label，其实用textView添加链接实现起来非常方便。<br>实现如下效果:<br><img src="http://ok841h9gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-21%20%E4%B8%8B%E5%8D%883.34.35.png" alt="img"><br>需要设置得文字</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *text =<span class="string">@"我同意《XX在线服务协议》及《XX在线用户信息及隐私保护规则》"</span>;</div><div class="line"><span class="built_in">NSMutableAttributedString</span> *MAttributedString = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:text];</div><div class="line"><span class="comment">//《XX在线服务协议》</span></div><div class="line">    <span class="built_in">NSRange</span> range1 = <span class="built_in">NSMakeRange</span>(<span class="number">3</span>, <span class="number">10</span>);</div><div class="line">    [MAttributedString addAttributes:@&#123;<span class="built_in">NSLinkAttributeName</span>:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"string1://"</span>]                                            &#125; range:range1];</div><div class="line">    <span class="comment">//《XX在线用户信息及隐私保护规则》</span></div><div class="line">    <span class="built_in">NSRange</span> range2 = <span class="built_in">NSMakeRange</span>(<span class="number">14</span>, <span class="number">17</span>);</div><div class="line">    [MAttributedString addAttributes:@&#123;<span class="built_in">NSLinkAttributeName</span>:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"string2://"</span>]&#125;range:range2];</div><div class="line">    [MAttributedString endEditing];</div></pre></td></tr></table></figure>
<p>textView的设置</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UITextView</span> *textView = [[<span class="built_in">UITextView</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span>,<span class="number">100</span>, SCREEN_WIDTH  - <span class="number">20</span>,<span class="number">50</span>)];</div><div class="line">textView.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>];</div><div class="line">textView.scrollEnabled = <span class="literal">NO</span>;</div><div class="line">textView.textContainerInset = <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">textView.text = text;</div><div class="line">textView.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line"><span class="comment">//必须设为NO不然不能响应点击事件</span></div><div class="line">textView.editable = <span class="literal">NO</span>;</div><div class="line"><span class="comment">//设置链接的属性 设置那一段颜色</span></div><div class="line"><span class="built_in">NSDictionary</span> *linkAttributes =@&#123;</div><div class="line">                                <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor]&#125;;</div><div class="line">textView.linkTextAttributes = linkAttributes;</div><div class="line"></div><div class="line"><span class="comment">/** 设置自动检测类型为链接网址. */</span></div><div class="line">textView.dataDetectorTypes = <span class="built_in">UIDataDetectorTypeAll</span>;</div><div class="line">textView.delegate = <span class="keyword">self</span>;</div><div class="line">textView.attributedText = MAttributedString;</div><div class="line">[<span class="keyword">self</span>.view addSubview:textView];</div></pre></td></tr></table></figure>
<p>那两段文字的点击事件，在UItextView Delegate中实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)textView:(<span class="built_in">UITextView</span> *)textView shouldInteractWithURL:(<span class="built_in">NSURL</span> *)URL inRange:(<span class="built_in">NSRange</span>)characterRange</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 在代理方法回调的时候，如果没有“://”的话，在[URL scheme]方法里取不到特定的值，一句话://前面的才是最重要的标识符</span></div><div class="line">    <span class="keyword">if</span> ([[URL scheme] rangeOfString:<span class="string">@"string1"</span>].location != <span class="built_in">NSNotFound</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击《XX在线服务协议》"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([[URL scheme] rangeOfString:<span class="string">@"string2"</span>].location != <span class="built_in">NSNotFound</span>)&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击《XX在线用户信息及隐私保护规则》"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们需要实现一行文中中某些文字带有点击的功能，大多数情况下会采用label和button结合实现或者第三方富文本label，其实用textView添加链接实现起来非常方便。&lt;br&gt;实现如下效果:&lt;br&gt;&lt;img src=&quot;http://ok841h9gr.bkt.cl
    
    </summary>
    
    
      <category term="iOS" scheme="https://winterliao.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用Lottie简单实现动画</title>
    <link href="https://winterliao.github.io/2016/12/24/hello-world/"/>
    <id>https://winterliao.github.io/2016/12/24/hello-world/</id>
    <published>2016-12-24T15:11:05.000Z</published>
    <updated>2017-04-25T09:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lottie是Airbnb最近推出的开源项目,设计师只要使用AE把动画做出来,再使用Bodymovin插件就能把动画文件导出成json文件。这个json文件中包括动画的点的坐标,运行的轨迹等数据,在项目中引用这个开源库,使用这个json文件（或者URL）就可以实现动画,极快的完成了一个动画效果,要知道,简单的一个动画,用代码实现起来都需要花一定的时间。<br><img src="https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples2.gif" alt="图片">   </p>
<h3 id="跨平台使用"><a href="#跨平台使用" class="headerlink" title="跨平台使用"></a>跨平台使用</h3><p>这个库是跨平台的,只要设计出一套json动画描述文件,就可以支持Android,iOS,ReactNative,iOS目前是支持iOS8及以上的,同时支持OC和Swift,下面讲iOS的用法。</p>
<h3 id="支持使用Cocoapods和Carthage导入"><a href="#支持使用Cocoapods和Carthage导入" class="headerlink" title="支持使用Cocoapods和Carthage导入"></a>支持使用Cocoapods和Carthage导入</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'lottie-ios'</span></div><div class="line">pod install</div></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">github</span> <span class="string">"airbnb/lottie-ios"</span> <span class="string">"master"</span></div><div class="line">carthage update</div></pre></td></tr></table></figure>
<h3 id="简单代码实现"><a href="#简单代码实现" class="headerlink" title="简单代码实现"></a>简单代码实现</h3><p>加载json本地文件   </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//加载本地的json描述文件</span></div><div class="line">LAAnimationView *animation = [LAAnimationView animationNamed:<span class="string">@"Lottie"</span>];</div><div class="line">[<span class="keyword">self</span>.view addSubview:animation];</div><div class="line"><span class="comment">//循环播放</span></div><div class="line">animation.loopAnimation = <span class="literal">YES</span>;</div><div class="line"><span class="comment">//1.直接开启</span></div><div class="line">[animation playWithCompletion:^(<span class="built_in">BOOL</span> animationFinished) &#123;</div><div class="line">  <span class="comment">// Do Something</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">//2.手动开启</span></div><div class="line"><span class="comment">//设置动画的进度</span></div><div class="line"><span class="comment">//animation.animationProgress = 0</span></div><div class="line"><span class="comment">//[animation play]</span></div><div class="line"><span class="comment">//手动关闭</span></div><div class="line"><span class="comment">//[animation pause]</span></div></pre></td></tr></table></figure>
<p>加载URL</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">LAAnimationView *animation = [[LAAnimationView alloc] initWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:URL]];</div><div class="line">[<span class="keyword">self</span>.view addSubview:animation];</div></pre></td></tr></table></figure>
<h3 id="增加转场动画"><a href="#增加转场动画" class="headerlink" title="增加转场动画"></a>增加转场动画</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -- View Controller Transitioning</span></div><div class="line"></div><div class="line">\\</div><div class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                                  presentingController:(<span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                      sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line">  LAAnimationTransitionController *animationController = [[LAAnimationTransitionController alloc] initWithAnimationNamed:<span class="string">@"vcTransition1"</span></div><div class="line">                                                                                                          fromLayerNamed:<span class="string">@"outLayer"</span></div><div class="line">                                                                                                            toLayerNamed:<span class="string">@"inLayer"</span>];</div><div class="line">  <span class="keyword">return</span> animationController;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\\</div><div class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed &#123;</div><div class="line">  LAAnimationTransitionController *animationController = [[LAAnimationTransitionController alloc] initWithAnimationNamed:<span class="string">@"vcTransition2"</span></div><div class="line">                                                                                                          fromLayerNamed:<span class="string">@"outLayer"</span></div><div class="line">                                                                                                            toLayerNamed:<span class="string">@"inLayer"</span>];</div><div class="line">  <span class="keyword">return</span> animationController;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift实现"><a href="#Swift实现" class="headerlink" title="Swift实现"></a>Swift实现</h3><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> animationView = <span class="type">LAAnimationView</span>.animationNamed(<span class="string">"hamburger"</span>)</div><div class="line"><span class="keyword">self</span>.view.addSubview(animationView!)</div><div class="line"></div><div class="line">animationView?.play(completion: &#123; (finished) <span class="keyword">in</span></div><div class="line">  <span class="comment">// Do Something</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="https://gold.xitu.io/post/58948f1b0ce4630056f3a629?utm_source=gold_browser_extension">这个项目碉堡了</a>   </p>
<p><a href="https://github.com/airbnb/lottie-ios">Airbnb/Lottie-iOS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lottie是Airbnb最近推出的开源项目,设计师只要使用AE把动画做出来,再使用Bodymovin插件就能把动画文件导出成json文件。这个json文件中包括动画的点的坐标,运行的轨迹等数据,在项目中引用这个开源库,使用这个json文件（或者URL）就可以实现动画,极快
    
    </summary>
    
    
  </entry>
  
</feed>
